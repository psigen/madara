//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: Splice_Knowledge_UpdateDcps.h
//  Source: include/madara/transport/splice/Splice_Knowledge_UpdateDcps.idl
//  Generated: Wed Jan 11 23:55:01 2012
//  OpenSplice V5.2.0
//  
//******************************************************************
#ifndef _SPLICE_KNOWLEDGE_UPDATEDCPS_H_
#define _SPLICE_KNOWLEDGE_UPDATEDCPS_H_


#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps_interfaces.h"
#include "dds_builtinTopics.h"
#include "dds_dcps_builtintopics.h"
#include "Splice_Knowledge_Update.h"

namespace Knowledge
{
   struct Update;

   class UpdateTypeSupportInterface;

   typedef UpdateTypeSupportInterface * UpdateTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < UpdateTypeSupportInterface> UpdateTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < UpdateTypeSupportInterface> UpdateTypeSupportInterface_out;


   class UpdateDataWriter;

   typedef UpdateDataWriter * UpdateDataWriter_ptr;
   typedef DDS_DCPSInterface_var < UpdateDataWriter> UpdateDataWriter_var;
   typedef DDS_DCPSInterface_out < UpdateDataWriter> UpdateDataWriter_out;


   class UpdateDataReader;

   typedef UpdateDataReader * UpdateDataReader_ptr;
   typedef DDS_DCPSInterface_var < UpdateDataReader> UpdateDataReader_var;
   typedef DDS_DCPSInterface_out < UpdateDataReader> UpdateDataReader_out;


   class UpdateDataReaderView;

   typedef UpdateDataReaderView * UpdateDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < UpdateDataReaderView> UpdateDataReaderView_var;
   typedef DDS_DCPSInterface_out < UpdateDataReaderView> UpdateDataReaderView_out;

   struct UpdateSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Update, struct UpdateSeq_uniq_> UpdateSeq;
   typedef DDS_DCPSSequence_var < UpdateSeq> UpdateSeq_var;
   typedef DDS_DCPSSequence_out < UpdateSeq> UpdateSeq_out;
   class UpdateTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef UpdateTypeSupportInterface_ptr _ptr_type;
      typedef UpdateTypeSupportInterface_var _var_type;

      static UpdateTypeSupportInterface_ptr _duplicate (UpdateTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static UpdateTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static UpdateTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static UpdateTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      UpdateTypeSupportInterface_ptr _this () { return this; }


   protected:
      UpdateTypeSupportInterface () {};
      ~UpdateTypeSupportInterface () {};
   private:
      UpdateTypeSupportInterface (const UpdateTypeSupportInterface &);
      UpdateTypeSupportInterface & operator = (const UpdateTypeSupportInterface &);
   };

   class UpdateDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef UpdateDataWriter_ptr _ptr_type;
      typedef UpdateDataWriter_var _var_type;

      static UpdateDataWriter_ptr _duplicate (UpdateDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static UpdateDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static UpdateDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static UpdateDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      UpdateDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const Update& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const Update& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const Update& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const Update& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const Update& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const Update& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const Update& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const Update& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const Update& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const Update& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (Update& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const Update& instance_data) = 0;

   protected:
      UpdateDataWriter () {};
      ~UpdateDataWriter () {};
   private:
      UpdateDataWriter (const UpdateDataWriter &);
      UpdateDataWriter & operator = (const UpdateDataWriter &);
   };

   class UpdateDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef UpdateDataReader_ptr _ptr_type;
      typedef UpdateDataReader_var _var_type;

      static UpdateDataReader_ptr _duplicate (UpdateDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static UpdateDataReader_ptr _narrow (DDS::Object_ptr obj);
      static UpdateDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static UpdateDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      UpdateDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (Update& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (Update& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (Update& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const Update& instance) = 0;

   protected:
      UpdateDataReader () {};
      ~UpdateDataReader () {};
   private:
      UpdateDataReader (const UpdateDataReader &);
      UpdateDataReader & operator = (const UpdateDataReader &);
   };

   class UpdateDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef UpdateDataReaderView_ptr _ptr_type;
      typedef UpdateDataReaderView_var _var_type;

      static UpdateDataReaderView_ptr _duplicate (UpdateDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static UpdateDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static UpdateDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static UpdateDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      UpdateDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (Update& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (Update& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (UpdateSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (Update& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const Update& instance) = 0;

   protected:
      UpdateDataReaderView () {};
      ~UpdateDataReaderView () {};
   private:
      UpdateDataReaderView (const UpdateDataReaderView &);
      UpdateDataReaderView & operator = (const UpdateDataReaderView &);
   };

}
template <>
DDS::BuiltinTopicKey_t_slice* DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::copy (DDS::BuiltinTopicKey_t_slice *to, const DDS::BuiltinTopicKey_t_slice* from);
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::free (DDS::BuiltinTopicKey_t_slice *ptr);




#endif 
