//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: Splice_Knowledge_UpdateDcps.cpp
//  Source: Splice_Knowledge_UpdateDcps.idl
//  Generated: Fri Aug 27 00:06:36 2010
//  OpenSplice V5.2.0
//  
//******************************************************************

#include "Splice_Knowledge_UpdateDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < Knowledge::Update, struct UpdateSeq_uniq_>;
#endif

const char * Knowledge::UpdateTypeSupportInterface::_local_id = "IDL:Knowledge/UpdateTypeSupportInterface:1.0";

Knowledge::UpdateTypeSupportInterface_ptr Knowledge::UpdateTypeSupportInterface::_duplicate (Knowledge::UpdateTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Knowledge::UpdateTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, Knowledge::UpdateTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Knowledge::UpdateTypeSupportInterface_ptr Knowledge::UpdateTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   Knowledge::UpdateTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (Knowledge::UpdateTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < Knowledge::UpdateTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

Knowledge::UpdateTypeSupportInterface_ptr Knowledge::UpdateTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   Knowledge::UpdateTypeSupportInterface_ptr result;
   result = dynamic_cast < Knowledge::UpdateTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * Knowledge::UpdateDataWriter::_local_id = "IDL:Knowledge/UpdateDataWriter:1.0";

Knowledge::UpdateDataWriter_ptr Knowledge::UpdateDataWriter::_duplicate (Knowledge::UpdateDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Knowledge::UpdateDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, Knowledge::UpdateDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Knowledge::UpdateDataWriter_ptr Knowledge::UpdateDataWriter::_narrow (DDS::Object_ptr p)
{
   Knowledge::UpdateDataWriter_ptr result = NULL;
   if (p && p->_is_a (Knowledge::UpdateDataWriter::_local_id))
   {
      result = dynamic_cast < Knowledge::UpdateDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

Knowledge::UpdateDataWriter_ptr Knowledge::UpdateDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   Knowledge::UpdateDataWriter_ptr result;
   result = dynamic_cast < Knowledge::UpdateDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * Knowledge::UpdateDataReader::_local_id = "IDL:Knowledge/UpdateDataReader:1.0";

Knowledge::UpdateDataReader_ptr Knowledge::UpdateDataReader::_duplicate (Knowledge::UpdateDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Knowledge::UpdateDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, Knowledge::UpdateDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Knowledge::UpdateDataReader_ptr Knowledge::UpdateDataReader::_narrow (DDS::Object_ptr p)
{
   Knowledge::UpdateDataReader_ptr result = NULL;
   if (p && p->_is_a (Knowledge::UpdateDataReader::_local_id))
   {
      result = dynamic_cast < Knowledge::UpdateDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

Knowledge::UpdateDataReader_ptr Knowledge::UpdateDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   Knowledge::UpdateDataReader_ptr result;
   result = dynamic_cast < Knowledge::UpdateDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * Knowledge::UpdateDataReaderView::_local_id = "IDL:Knowledge/UpdateDataReaderView:1.0";

Knowledge::UpdateDataReaderView_ptr Knowledge::UpdateDataReaderView::_duplicate (Knowledge::UpdateDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Knowledge::UpdateDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, Knowledge::UpdateDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Knowledge::UpdateDataReaderView_ptr Knowledge::UpdateDataReaderView::_narrow (DDS::Object_ptr p)
{
   Knowledge::UpdateDataReaderView_ptr result = NULL;
   if (p && p->_is_a (Knowledge::UpdateDataReaderView::_local_id))
   {
      result = dynamic_cast < Knowledge::UpdateDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

Knowledge::UpdateDataReaderView_ptr Knowledge::UpdateDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   Knowledge::UpdateDataReaderView_ptr result;
   result = dynamic_cast < Knowledge::UpdateDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}



